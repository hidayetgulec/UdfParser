import fs from 'fs';
import path from 'path';
import AdmZip from 'adm-zip';
import { NextResponse } from 'next/server';
import xml2js from 'xml2js';
import puppeteer from 'puppeteer';

export async function POST(req) {
  try {
    const formData = await req.formData();
    const udfFile = formData.get('udfFile');

    if (!udfFile) {
      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });
    }

    const filePath = path.join(process.cwd(), 'uploads', udfFile.name);
    const buffer = await udfFile.arrayBuffer();
    fs.writeFileSync(filePath, Buffer.from(buffer));

    // ZIP dosyasını açıyoruz
    const zip = new AdmZip(filePath);
    const zipEntries = zip.getEntries();

    // XML dosyasını bulup içeriğini okuyoruz
    let xmlContent = '';
    zipEntries.forEach(entry => {
      if (entry.entryName.endsWith('.xml')) {
        xmlContent = entry.getData().toString('utf8');
      }
    });

    if (!xmlContent) {
      return NextResponse.json({ error: 'No XML file found in the UDF file' }, { status: 400 });
    }

    // XML'i JSON formatına dönüştürüyoruz
    const parser = new xml2js.Parser({
      explicitArray: false,
      preserveChildrenOrder: true,
      trim: false,
      explicitCharkey: true,
    });

    const result = await new Promise((resolve, reject) => {
      parser.parseString(xmlContent, (err, parsedData) => {
        if (err) reject('Error parsing XML content');
        resolve(parsedData);
      });
    });

    const jsonData = result.template?.content || 'No valid content';

    // jsonData'yı string'e dönüştürüyoruz
    const contentToPrint = typeof jsonData === 'object' ? JSON.stringify(jsonData) : jsonData;

    // Puppeteer kullanarak PDF oluşturuyoruz
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(`<html><body><h1>XML İçeriğinden Oluşturulan PDF</h1><p>${contentToPrint}</p></body></html>`);
    const pdfBuffer = await page.pdf();
    await browser.close();

    // pdfBuffer'ın base64 formatına dönüştürülmesi
    const base64Pdf = Buffer.from(pdfBuffer).toString('base64');

    return NextResponse.json({ pdfDataUri: base64Pdf });

  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'An error occurred during file processing' }, { status: 500 });
  }
}
